{
  "name": "randomhost/icinga",
  "tagline": "Provides check and notification commands for the Icinga monitoring system.",
  "body": "[![Build Status][0]][1]\r\n\r\nIntroduction\r\n============\r\n\r\nThis package provides check and notification commands for the Icinga monitoring\r\nsystem.\r\n\r\nUsage\r\n-----\r\n\r\n### The Base class\r\n\r\nThe abstract `Base` class implements the following public methods which are\r\navailable for both, check and notification classes.\r\n\r\n- `Base::getShortOptions()`  \r\n    Returns available short options. The return value is supposed to be passed\r\n    to PHP's built-in `getopt()` function as the first parameter and is used for\r\n    setting up the command line arguments accepted by the check class.\r\n\r\n- `Base::getLongOptions()`  \r\n    Returns available long options. The return value is supposed to be passed to\r\n    PHP's built-in `getopt()` function as the second parameter and is used for\r\n    setting up the command line arguments accepted by the check class.\r\n    \r\n    The `Base` class comes with the pre-defined long option `--help` which\r\n    triggers the built-in help method `Base::displayHelp()`.\r\n\r\n- `Base::getMessage()`  \r\n    Returns the plugin output. The return value is supposed to be echoed to\r\n    stdout and defines the status message which will be passed to Icinga.\r\n\r\n- `Base::getCode()`  \r\n    Returns the return code. The return value is supposed to be passed to PHP's\r\n    built-in `exit()` function and defines the status code which will be passed\r\n    to Icinga.\r\n\r\n- `Base::setOptions($options)`  \r\n    This method accepts parsed command line arguments as returned by PHP's\r\n    built-in `getopt()` function.\r\n\r\nCheck and notification classes should **NOT** extend this class directly. They\r\nshould extend their corresponding base class `Check\\Base` or `Notification\\Base`\r\naccordingly.\r\n\r\n### Check plugins\r\n\r\nA basic approach at using a check plugin built with this package could look like\r\nthis:\r\n\r\n```php\r\n<?php\r\nnamespace randomhost\\Icinga\\Check;\r\n\r\nrequire_once '/path/to/vendor/autoload.php';\r\n\r\n$check = new ExampleService();\r\n$check->run();\r\n\r\necho $check->getMessage();\r\nexit($check->getCode());\r\n```\r\n\r\nThis will instantiate the check class for the example service and run the checks\r\ndefined for that service. What is being checked depends on the individual check\r\nimplementation.\r\n\r\n#### The Check\\Base class\r\n\r\nThe abstract `Check\\Base` class provides common methods for extending child\r\nclasses. It implements one public method in addition to the ones provided by\r\nthe common `Base` class:\r\n\r\n- `Check\\Base::run()`  \r\n    Takes care of validating command line parameters, displaying help output and\r\n    executing the main check plugin logic.\r\n\r\nAll check classes should extend this class.\r\n\r\n#### Implementing check classes\r\n\r\nTo create a check class, simply extend the `Check\\Base` class and implement a\r\nprotected method `check()`.\r\n\r\n```php\r\n<?php\r\nnamespace randomhost\\Icinga\\Check;\r\n\r\nclass ExampleService extends Base implements Check\r\n{\r\n    protected function check()\r\n    {\r\n        // main check logic goes here\r\n        \r\n        $this->setMessage('Everything is fine');\r\n        $this->setCode(self::STATE_OK);\r\n    }\r\n}\r\n```\r\n\r\nIf your check requires command line parameters, you can define those in the\r\nconstructor of your check class. This is also the right place to place the\r\nhelp output which is shown if a required parameter is missing.\r\n\r\n```php\r\n<?php\r\nnamespace randomhost\\Icinga\\Check;\r\n\r\nclass ExampleService extends Base implements Check\r\n{\r\n    public function __construct()\r\n    {\r\n        $this->setLongOptions(\r\n            array(\r\n                'host:',\r\n                'port:',\r\n                'user:',\r\n                'password:',\r\n                'warningThreshold:',\r\n                'criticalThreshold:'\r\n            )\r\n        );\r\n    \r\n        $this->setRequiredOptions(\r\n            array(\r\n                'host',\r\n                'port',\r\n                'user',\r\n                'password',\r\n                'warningThreshold',\r\n                'criticalThreshold'\r\n            )\r\n        );\r\n        \r\n        $this->setHelp('\r\nIcinga plugin for checking the example service.\r\n\r\n--host              Example service IP address or hostname\r\n--port              Example service port\r\n--user              Example service user\r\n--password          Example service password\r\n--warningThreshold  Threshold to trigger the WARNING state\r\n--criticalThreshold Threshold to trigger the CRITICAL state\r\n        ');\r\n    }\r\n    \r\n    protected function check()\r\n    {\r\n        $options = $this->getOptions();\r\n        \r\n        // main check logic goes here\r\n    }\r\n}\r\n```\r\n\r\n### Notification plugins\r\n\r\nA basic approach at using a notification plugin built with this package could\r\nlook like this:\r\n\r\n```php\r\n<?php\r\nnamespace randomhost\\Icinga\\Notification;\r\n\r\nrequire_once '/path/to/vendor/autoload.php';\r\n\r\n$notification = new ExampleNotification();\r\n$notification->run();\r\n\r\necho $notification->getMessage();\r\nexit($notification->getCode());\r\n```\r\n\r\nThis will instantiate the notification class for the example notification plugin\r\nand run the logic defined for that plugin. What type of notification is being\r\nsent depends on the individual notification class implementation.\r\n\r\n#### The Notification\\Base class\r\n\r\nThe abstract `Notification\\Base` class provides common methods for extending\r\nchild classes. It implements one public method in addition to the ones provided\r\nby the common `Base` class:\r\n\r\n- `Notification\\Base::run()`  \r\n    Takes care of validating command line parameters, displaying help output and\r\n    executing the main notification plugin logic.\r\n\r\nAll notification classes should extend this class.\r\n\r\n#### Implementing notification classes\r\n\r\nTo create a notification class, simply extend the `Notification\\Base` class and\r\nimplement a protected method `send()`.\r\n\r\n```php\r\n<?php\r\nnamespace randomhost\\Icinga\\Notification;\r\n\r\nclass ExampleNotification extends Base implements Notification\r\n{\r\n    protected function send()\r\n    {\r\n        // main notification logic goes here\r\n        \r\n        $this->setMessage('Notification sent');\r\n        $this->setCode(self::STATE_OK);\r\n    }\r\n}\r\n```\r\n\r\nIf your notification class requires command line parameters, you can define\r\nthose in the constructor of your notification class. This is also the right\r\nplace to place the help output which is shown if a required parameter is missing.\r\n\r\n```php\r\n<?php\r\nnamespace randomhost\\Icinga\\Notification;\r\n\r\nclass ExampleNotification extends Base implements Notification\r\n{\r\n    public function __construct()\r\n    {\r\n        $this->setLongOptions(\r\n            array(\r\n                'type:',\r\n                'service:',\r\n                'host:',\r\n                'address:',\r\n                'state:',\r\n                'time:',\r\n                'output:',\r\n                'phonenumber:',\r\n            )\r\n        );\r\n        \r\n        $this->setRequiredOptions(\r\n            array(\r\n                'type',\r\n                'service',\r\n                'host',\r\n                'address',\r\n                'state',\r\n                'time',\r\n                'output',\r\n                'phonenumber',\r\n            )\r\n        );\r\n        \r\n        $this->setHelp('\r\nIcinga plugin for sending notifications via the example notification provider.\r\n\r\n--type         Notification type\r\n--service      Service name\r\n--host         Host name\r\n--address      Host address\r\n--state        Service state\r\n--time         Notification time\r\n--output       Check plugin output\r\n--phonenumber  User phone number\r\n        ');\r\n    }\r\n    \r\n    protected function send()\r\n    {\r\n        $options = $this->getOptions();\r\n        \r\n        // main notification logic goes here\r\n    }\r\n}\r\n```\r\n\r\n\r\nLicense\r\n-------\r\n\r\nSee LICENSE.txt for full license details.\r\n\r\n\r\n[0]: https://travis-ci.org/randomhost/icinga.svg?branch=master\r\n[1]: https://travis-ci.org/randomhost/icinga\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}